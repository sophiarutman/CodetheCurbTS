p_estimate <- mean(counts[1] == 3 & counts[2] == 4 & counts[3] == 3)
p_exact <- dmultinom(c(3, 4, 3), size = 10, prob = c(0.3, 0.4, 0.3))
p_estimate
p_exact
#set.seed(1973)
n_sim <- 10000
X <- sample(1:3, size = 10, replace = TRUE, prob = c(0.3, 0.4, 0.3))
counts <- table(factor(X, levels = 1:3))
p_estimate <- mean(counts[1] == 3 & counts[2] == 4 & counts[3] == 3)
p_exact <- dmultinom(c(3, 4, 3), size = 10, prob = c(0.3, 0.4, 0.3))
p_estimate
p_exact
#set.seed(1973)
n_sim <- 10000
X <- sample(1:3, size = 10, replace = TRUE, prob = c(0.3, 0.4, 0.3))
counts <- table(factor(X, levels = 1:3))
p_estimate <- mean(counts[1] == 3 & counts[2] == 4 & counts[3] == 3)
p_exact <- dmultinom(c(3, 4, 3), size = 10, prob = c(0.3, 0.4, 0.3))
p_estimate
p_exact
#set.seed(1973)
n_sim <- 10000
X <- sample(1:3, size = 10, replace = TRUE, prob = c(0.3, 0.4, 0.3))
counts <- table(factor(X, levels = 1:3))
p_estimate <- mean(counts[1] == 3 & counts[2] == 4 & counts[3] == 3)
p_exact <- dmultinom(c(3, 4, 3), size = 10, prob = c(0.3, 0.4, 0.3))
p_estimate
p_exact
set.seed(1973)
n_sim <- 100000
X <- sample(1:3, size = 10, replace = TRUE, prob = c(0.3, 0.4, 0.3))
counts <- table(factor(X, levels = 1:3))
p_estimate <- mean(counts[1] == 3 & counts[2] == 4 & counts[3] == 3)
p_exact <- dmultinom(c(3, 4, 3), size = 10, prob = c(0.3, 0.4, 0.3))
p_estimate
p_exact
set.seed(1973)
n_sim <- 100000
X <- sample(1:3, size = 10, replace = TRUE, prob = c(0.3, 0.4, 0.3))
counts <- table(factor(X, levels = 1:3))
p_estimate <- mean(counts[1] == 3 & counts[2] == 4 & counts[3] == 3)
p_exact <- dmultinom(c(3, 4, 3), size = 10, prob = c(0.3, 0.4, 0.3))
p_estimate
p_exact
set.seed(1973)
n_sim <- 10000
X_samps <- matrix(runif(12 * n_sim), nrow = n_sim)
Z_samps <- rowSums(X_samps) - 6
hist(Z_samps, probability = TRUE, main = "Histogram of Z", xlab = "Z")
# Set Seed for Reproducibility
set.seed(1973)
# Initialize number of Simulations
n_sim <- 10000
# Sample Xs
X_samps <- replicate(n_sim, mean(rnorm(9, mean = 7, sd = 3)))
# Sample Ys
Y_samps <- replicate(n_sim, mean(rnorm(12, mean = 10, sd = 5)))
# Make the W distribution
W_samps <- X_samps - Y_samps
hist(W_samps, probability = TRUE, main = "Histogram of W", xlab = "W")
# Set Seed for Reproducibility
set.seed(1973)
# Initialize number of Simulations
n_sim <- 10000
# Sample Xs
X_samps <- replicate(n_sim, mean(rnorm(9, mean = 7, sd = 3)))
# Sample Ys
Y_samps <- replicate(n_sim, mean(rnorm(12, mean = 10, sd = 5)))
# Make the W distribution
W_samps <- X_samps - Y_samps
hist(W_samps, probability = TRUE, main = "Histogram of W", xlab = "W")
p_simulated <- mean(W_samps < -1.5)
p_exact <- pnorm(-1.5, mean = 7 - 10, sd = sqrt((3^2 / 9) + (5^2 / 12)))
p_simulated
p_exact
# Set Seed
set.seed(1973)
# Set number of simulations
n_sim <- 10000
# Draw X variable
X_samps <- rbinom(n_sim, 80, .2)
# Numerator of our expression
numerator <- mean(X_samps < 12)
# Denominator of our expression
denominator <- mean(X_samps < 18)
# Calculate P(X < 12 | X < 18)
conditional_prob <- numerator / denominator
# Calculate E(X | X < 18)
E_X_given_18 <- mean(X_samps[X_samps < 18])
# Output results
conditional_prob
E_X_given_18
# Set seed
set.seed(1973)
# Number of Simulations
n_sims <- 10000
# Draw samples for X
X_samps <- rbinom(n_sims, 80, .2)
# Filter samples in the range [12, 20]
X_filtered <- X_samps[X_samps >= 12 & X_samps <= 20]
# Calculate the ECDF
ecdf_X <- ecdf(X_filtered)
# Plot the ECDF
plot(ecdf_X, main = "ECDF of X | (12 ≤ X ≤ 20)",
xlab = "X", ylab = "ECDF", col = "blue", lwd = 2)
abline(h = 0, col = "gray", lty = 2)  # Add a horizontal line at y = 0
abline(v = 12, col = "red", lty = 2)   # Add a vertical line at x = 12
abline(v = 20, col = "red", lty = 2)   # Add a vertical line at x = 20
# Set seed
set.seed(1973)
# Number of Simulations
n_sims <- 10000
# Draw samples for X
X_samps <- rbinom(n_sims, 80, .2)
# Filter samples in the range [12, 20]
X_filtered <- X_samps[X_samps >= 12 & X_samps <= 20]
# Calculate the ECDF
ecdf_X <- ecdf(X_filtered)
# Plot the ECDF
plot(ecdf_X, main = "ECDF of X | (12 ≤ X ≤ 20)",
xlab = "X", ylab = "ECDF", col = "blue", lwd = 2)
# Add lines to imitate the range we're looking at
abline(v = 12, col = "red", lty = 2)   # Line at x = 12
abline(v = 20, col = "red", lty = 2)   # Line at x = 20
# Set seed
set.seed(1973)
# Number of Simulations
n_sims <- 10000
# Draw samples for X
X_samps <- rbinom(n_sims, 80, .2)
# Filter samples in the range [12, 20]
X_filtered <- X_samps[X_samps >= 12 & X_samps <= 20]
# Calculate the ECDF
ecdf_X <- ecdf(X_filtered)
# Plot the ECDF
plot(ecdf_X, main = "ECDF of X | (12 ≤ X ≤ 20)",
xlab = "X", ylab = "ECDF", col = "blue", lwd = 2)
# Add lines to imitate the range we're looking at
abline(v = 12, col = "red", lty = 2)   # Line at x = 12
abline(v = 20, col = "red", lty = 2)   # Line at x = 20
set.seed(1973)
n_sim <- 10000
Y_samps <- rbinom(n_sim, 100, 0.7)
# Generate X samples where X + Y = 90
X_conditional <- 90 - Y_samps[Y_samps <= 90]
ecdf_Z_90 <- ecdf(X_conditional)
plot(ecdf_Z_90, main = "ECDF of X | (Z = 90)", xlab = "X", ylab = "ECDF", col = "blue", lwd = 2)
k_values <- c(10, 15, 20)
E_Z_given_X <- sapply(k_values, function(k) {
E_Y <- 100 * 0.7  # Expectation of Y
return(k + E_Y)
})
E_Z_given_X
# Do the same, but for different values
k_values <- c(80, 90, 100)
E_X_given_Z <- sapply(k_values, function(k) {
# Inverse function for calculation (approximation needed)
return((k - 100 * 0.7) / (0.2 + 0.7))  # Adjust based on distribution
})
E_X_given_Z
hist(X_samples, probability = TRUE, main = "Histogram of X", xlab = "X", fill = "cyan")
hist(X_samples, probability = TRUE, main = "Histogram of X", xlab = "X", col = "cyan")
set.seed(1973)
X_samples <- rexp(1000, rate = 1)
hist(X_samples, probability = TRUE, main = "Histogram of X", xlab = "X", col = "cyan")
set.seed(1973)
X_samples <- rexp(1000, rate = 1)
hist(X_samples, probability = TRUE, main = "Histogram of X", xlab = "X", col = "cyan")
Y_samples <- rpois(1000, lambda = 1.5)
hist(Y_samples, probability = TRUE, main = "Histogram of Y | X = 1.5", xlab = "Y", col = "cyan")
# Set Seed
set.seed(1973)
# Initialize Y Samples
Y_samps <- rpois(1000, lambda = 1.5)
# Plot
hist(Y_samps, probability = TRUE, main = "Histogram of Y | X = 1.5", xlab = "Y", col = "cyan")
# Sample marginal distribution using law of total expectation
Y_marginal_samples <- sapply(rexp(1000, rate = 1), function(x) rpois(1, lambda = x))
hist(Y_marginal_samples, probability = TRUE, main = "Histogram of Y", xlab = "Y", col = "cyan")
# Generate conditional Distribution
Y_samps <- rpois(1000, lambda = rexp(1000, rate = 1))
X_given_Y_2 <- rexp(sum(Y_samps == 2), rate = 1)
# Plot
hist(X_given_Y_2, probability = TRUE, main = "Histogram of X | Y = 2", xlab = "X")
# Generate conditional Distribution
Y_samps <- rpois(1000, lambda = rexp(1000, rate = 1))
X_given_Y_2 <- rexp(sum(Y_samps == 2), rate = 1)
# Plot
hist(X_given_Y_2, probability = TRUE, main = "Histogram of X | Y = 2", xlab = "X", col = "cyan")
set.seed(1973)
n_samples <- 1000
X_samples <- rnorm(n_samples)
Y_samples <- rnorm(n_samples)
Z_samples <- Y_samples[X_samples + Y_samples >= 1]
hist(Z_samples, probability = TRUE, main = "Histogram of Z", xlab = "Z", col = "cyan")
mean(Z_samples)
sd(Z_samples)
# Set Seed
set.seed(1973)
# Number of samples
n_samps <- 1000
# Sample X
X_samps <- rnorm(n_samps)
Y_samps <- rnorm(n_samples)
Z_samps <- Y_samps[X_samps + Y_samps >= 1]
hist(Z_samps, probability = TRUE, main = "Histogram of Z", xlab = "Z", col = "cyan")
mean(Z_samps)
sd(Z_samples)
# Set Seed
set.seed(1973)
# Number of samples
n_samps <- 1000
# Sample X
X_samps <- rnorm(n_samps)
Y_samps <- rnorm(n_samples)
Z_samps <- Y_samps[X_samps + Y_samps >= 1]
hist(Z_samps, probability = TRUE, main = "Histogram of Z", xlab = "Z", col = "cyan")
mean(Z_samps)
sd(Z_samples)
# Set Seed
set.seed(1973)
# Number of samples
n_samps <- 1000
# Sample X
X_samps <- rnorm(n_samps)
# Sample Y
Y_samps <- rnorm(n_samps)
# Build the Z distribution
Z_samps <- Y_samps[X_samps + Y_samps >= 1]
# Plot and find preliminary statistics
hist(Z_samps, probability = TRUE, main = "Histogram of Z", xlab = "Z", col = "cyan")
mean(Z_samps)
sd(Z_samples)
# Set Seed
set.seed(1973)
# Number of Simulations
n_sim <- 10000
# Initialize and fill results vector
results <- rmultinom(n_sim, size = 20, prob = c(0.45, 0.45, 0.1))
# Calculate the probability estimate
p_estimate <- mean(results[1,] == 9 & results[2,] == 9 & results[3,] == 2)
# Compare with the exact probability
p_exact <- dmultinom(c(9, 9, 2), size = 20, prob = c(0.45, 0.45, 0.1))
p_estimate
p_exact
# Set Seed
set.seed(1973)
# Number of Simulations
n_sim <- 10000
# Simulate (Sample) X
X <- sample(1:3, size = 10, replace = TRUE, prob = c(0.3, 0.4, 0.3))
# Create a frequency table
counts <- table(factor(X, levels = 1:3))
# Create a estimate probability and compare with exact probability
p_estimate <- mean(counts[1] == 3 & counts[2] == 4 & counts[3] == 3)
p_exact <- dmultinom(c(3, 4, 3), size = 10, prob = c(0.3, 0.4, 0.3))
p_estimate
p_exact
# Set Seed
set.seed(1973)
# Number of Simulations
n_sim <- 10000
# Initialize a counter for the desired outcome
count_success <- 0
for (i in 1:n_sim) {
# Simulate (Sample) X
X <- sample(1:3, size = 10, replace = TRUE, prob = c(0.3, 0.4, 0.3))
# Create a frequency table
counts <- table(factor(X, levels = 1:3))
# Check if the counts match our desired outcome
if (counts[1] == 3 && counts[2] == 4 && counts[3] == 3) {
count_success <- count_success + 1
}
}
# Calculate the estimated probability
p_estimate <- count_success / n_sim
# Calculate the exact probability
p_exact <- dmultinom(c(3, 4, 3), size = 10, prob = c(0.3, 0.4, 0.3))
# Print results
p_estimate
p_exact
# Set Seed
set.seed(1973)
# Number of Simulations
n_sim <- 10000
# Sample X and Z
X_samps <- matrix(runif(12 * n_sim), nrow = n_sim)
Z_samps <- rowSums(X_samps) - 6
# Plot
hist(Z_samps, probability = TRUE, main = "Histogram of Z", xlab = "Z", col = "cyan")
# Set Seed
set.seed(1973)
# Number of samples
n_samps <- 10000
# Sample X
X_samps <- rnorm(n_samps)
# Sample Y
Y_samps <- rnorm(n_samps)
# Build the Z distribution
Z_samps <- Y_samps[X_samps + Y_samps >= 1]
# Plot and find preliminary statistics
hist(Z_samps, probability = TRUE, main = "Histogram of Z", xlab = "Z", col = "cyan")
mean(Z_samps)
sd(Z_samples)
# Set Seed
set.seed(1973)
# Number of samples
n_samps <- 10000
# Sample X
X_samps <- rnorm(n_samps)
# Sample Y
Y_samps <- rnorm(n_samps)
# Build the Z distribution
Z_samps <- Y_samps[X_samps + Y_samps >= 1]
# Plot and find preliminary statistics
hist(Z_samps, probability = TRUE, main = "Histogram of Z", xlab = "Z", col = "cyan")
mean(Z_samps)
sd(Z_samples)
# Set Seed
set.seed(1973)
# Number of samples
n_samps <- 10000
# Sample X
X_samps <- rnorm(n_samps)
# Sample Y
Y_samps <- rnorm(n_samps)
# Build the Z distribution
Z_samps <- Y_samps[X_samps + Y_samps >= 1]
# Plot and find preliminary statistics
hist(Z_samps, probability = TRUE, main = "Histogram of Z", xlab = "Z", col = "cyan")
mean(Z_samps)
sd(Z_samples)
library(nortest)
# Running the test
ad_test <- ad.test(Z_samps)
print(ad_test)
# Set Seed
set.seed(1973)
# Number of samples
n_samps <- 1000
# Sample X
X_samps <- rnorm(n_samps)
# Sample Y
Y_samps <- rnorm(n_samps)
# Build the Z distribution
Z_samps <- Y_samps[X_samps + Y_samps >= 1]
# Plot and find preliminary statistics
hist(Z_samps, probability = TRUE, main = "Histogram of Z", xlab = "Z", col = "cyan")
mean(Z_samps)
sd(Z_samples)
library(nortest)
# Running the test
ad_test <- ad.test(Z_samps)
print(ad_test)
library(nortest)
# Running the test
ad_test <- ad.test(Z_samps)
print(ad_test)
# Set Seed
set.seed(1973)
# Number of samples
n_samps <- 10000
# Sample X
X_samps <- rnorm(n_samps)
# Sample Y
Y_samps <- rnorm(n_samps)
# Build the Z distribution
Z_samps <- Y_samps[X_samps + Y_samps >= 1]
# Plot and find preliminary statistics
hist(Z_samps, probability = TRUE, main = "Histogram of Z", xlab = "Z", col = "cyan")
mean(Z_samps)
sd(Z_samps)
library(nortest)
# Running the test
ad_test <- ad.test(Z_samps)
print(ad_test)
library(ggpubr)
ggqqplot(df$Sepal.Width, main = "Q-Q Plot of Z")
library(ggpubr)
ggqqplot(Z_samps, main = "Q-Q Plot of Z")
# Set Seed
set.seed(1973)
# Number of Simulations
n_sim <- 10000
# Initialize and fill results vector
results <- rmultinom(n_sim, size = 20, prob = c(0.45, 0.45, 0.1))
# Calculate the probability estimate
p_estimate <- mean(results[1,] == 9 & results[2,] == 9 & results[3,] == 2)
# Compare with the exact probability
p_exact <- dmultinom(c(9, 9, 2), size = 20, prob = c(0.45, 0.45, 0.1))
p_estimate
p_exact
# Set Seed
set.seed(1973)
# Number of Simulations
n_sim <- 10000
# Initialize a counter for the desired outcome
count_success <- 0
for (i in 1:n_sim) {
# Simulate (Sample) X
X <- sample(1:3, size = 10, replace = TRUE, prob = c(0.3, 0.4, 0.3))
# Create a frequency table
counts <- table(factor(X, levels = 1:3))
# Check if the counts match our desired outcome
if (counts[1] == 3 && counts[2] == 4 && counts[3] == 3) {
count_success <- count_success + 1
}
}
# Calculate the estimated probability
p_estimate <- count_success / n_sim
# Calculate the exact probability
p_exact <- dmultinom(c(3, 4, 3), size = 10, prob = c(0.3, 0.4, 0.3))
# Print results
p_estimate
p_exact
# Set Seed
set.seed(1973)
# Number of Simulations
n_sim <- 10000
# Sample X and Z
X_samps <- matrix(runif(12 * n_sim), nrow = n_sim)
Z_samps <- rowSums(X_samps) - 6
# Plot
hist(Z_samps, probability = TRUE, main = "Histogram of Z", xlab = "Z", col = "cyan")
# Set Seed
set.seed(1973)
# Number of Simulations
n_sim <- 10000
# Sample X and Z
X_samps <- matrix(runif(12 * n_sim), nrow = n_sim)
Z_samps <- rowSums(X_samps) - 6
# Plot
hist(Z_samps, probability = TRUE, main = "Histogram of Z", xlab = "Z", col = "cyan")
# Running the test
ad_test <- ad.test(Z_samps)
print(ad_test)
# Run the Kolmogorov-Smirnov Test
ks_test <- ks.test(df$Sepal.Width, "pnorm", mean = 0, sd = 1)
# Run the Kolmogorov-Smirnov Test
ks_test <- ks.test(Z_samps, "pnorm", mean = 0, sd = 1)
print(ks_test)
# Generate conditional Distribution
Y_samps <- rpois(1000, lambda = rexp(1000, rate = 1))
X_given_Y_2 <- rexp(sum(Y_samps == 2), rate = 1)
# Plot
hist(X_given_Y_2, probability = TRUE, main = "Histogram of X | Y = 2", xlab = "X", col = "cyan")
# Set Seed for Reproducibility
set.seed(1973)
# Initialize number of Simulations
n_sim <- 10000
# Sample Xs
X_samps <- replicate(n_sim, mean(rnorm(9, mean = 7, sd = 3)))
# Sample Ys
Y_samps <- replicate(n_sim, mean(rnorm(12, mean = 10, sd = 5)))
# Make the W distribution
W_samps <- X_samps - Y_samps
hist(W_samps, probability = TRUE, main = "Histogram of W", xlab = "W")
# Set Seed for Reproducibility
set.seed(1973)
# Initialize number of Simulations
n_sim <- 10000
# Sample Xs
X_samps <- replicate(n_sim, mean(rnorm(9, mean = 7, sd = 3)))
# Sample Ys
Y_samps <- replicate(n_sim, mean(rnorm(12, mean = 10, sd = 5)))
# Make the W distribution
W_samps <- X_samps - Y_samps
hist(W_samps, probability = TRUE, main = "Histogram of W", xlab = "W", col = "cyan")
p_simulated <- mean(W_samps < -1.5)
p_exact <- pnorm(-1.5, mean = 7 - 10, sd = sqrt((3^2 / 9) + (5^2 / 12)))
p_simulated
p_exact
library(quantmod)
install.packages("quantmod")
setwd("C:/Users")
ls
setwd("C:/Users/treyr/Documents/Datathons/CodeTheCurb/CodetheCurbTS")
# Create a data frame with field definitions
field_definitions <- data.frame(
Field = c("version", "timezone", "stallID", "stallName",
"blockfaceID", "status", "location", "payloadTimestamp"),
Description = c(
"API version number",
"The time zone of Arlington County",
"Unique numerical identifier",
"Name of stall, consists of the BlockFaceID and an assigned number",
"A unique identifier for the block face where the stall is located",
"Status of the stall, either 'vacant' or 'occupied'",
"Latitude and longitude of the stall",
"The date and time in the local timezone when the status packet was sent."
)
)
# Display the table using kable
kable(field_definitions, caption = "Field Definitions for Arlington Parking API")
suppressMessages(library(knitr)) # Table building
# Create a data frame with field definitions
field_definitions <- data.frame(
Field = c("version", "timezone", "stallID", "stallName",
"blockfaceID", "status", "location", "payloadTimestamp"),
Description = c(
"API version number",
"The time zone of Arlington County",
"Unique numerical identifier",
"Name of stall, consists of the BlockFaceID and an assigned number",
"A unique identifier for the block face where the stall is located",
"Status of the stall, either 'vacant' or 'occupied'",
"Latitude and longitude of the stall",
"The date and time in the local timezone when the status packet was sent."
)
)
# Display the table using kable
kable(field_definitions, caption = "Field Definitions for Arlington Parking API")
